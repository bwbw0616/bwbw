<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:c="http://www.springframework.org/schema/c"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"
	>
<!-- SampleDAO sampleDAO = new SampleDAO_Maria(); -->
<!-- 		SampleService service = new SampleServiceImpl(sampleDAO); -->
	
<!-- 	CoC : Convention over Configuration -->
	<bean id="sampleDAO_Maria" class="kr.or.ddit.sample.dao.SampleDAO_Maria" 
		init-method="init"
		destroy-method="destroy"
	/>
	<bean id="SampleDAO_Oracle" class="kr.or.ddit.sample.dao.SampleDAO_Oracle"></bean>
	<bean id="sampleService" class="kr.or.ddit.sample.service.SampleServiceImpl" 
		c:sampleDAO-ref="sampleDAO_Maria"
	>
<!-- 		p:sampleDAO22-ref="SampleDAO_Oracle" -->
<!--  		<property name="sampleDAO22" ref="SampleDAO_Oracle"></property>		setter에서 불러온 -->
<!-- 		<constructor-arg name="sampleDAO" ref="sampleDAO_Maria"></constructor-arg> -->
	</bean>
	
<!-- 	Spring[Bean|DI|IoC] container : bean(객체)의 생명주기 관리자 -->
<!-- 	 container 사용 단계 -->
<!-- 	 1. spring-context 의존성을 maven에 추가. -->
<!-- 	 2. container 에 bean 등록 : sample-context.xml -> bean -->
<!-- 	 3. bean들 간의 의존 관계 형성 -->
<!-- 	 	1) setter injection : property, p --> 
<!-- 	 	2) construction injection : constructor-arg, c -->
<!-- 	4. Container 객체 생성 : ApplicationContext 의 구현체 -->
<!-- 	5. container로 부터 필요한 객체(의존객체)를 주입받아 사용. : getBean -->

<!-- container의 bean 관리 특성 -->
<!-- 1. singleton : 하나의 빈에 대해 특별한 설정(saope)이 없는 한 singleton 의 형태로 객체 운영. -->
<!-- 			singleton : 빈 하나당 객체 하나가 운영 -->
<!-- 			prototype : 하나의 빈에 대해 주입시마다 새로운 객체가 생성됨. -->
<!-- 2. 특별한 설정(lazy-init)이 없는 한 container 는 빈을 컨테이너가 초기화할 때 등록된 모든 빈을 생성함. -->
<!-- 3. 등록된 빈의 객체 생성 순서 제어 설정 : depends-on -->
<!-- 4. container는 빈의 생명주기 내에서 callback을 호출하는 구조를 가짐. -->
<!-- 5. 컨테이너 내부에 등록된 bean이 컨테이너의 레퍼런스를 주입받는 경우, @Inject/@Autowired 등으로 주입 가능. -->
</beans>

